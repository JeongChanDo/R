setwd("~/GitHub/big_data/regression_analysis")
market = read.table("data/market-1.txt",header=T)
head(market)
plot(market$X, market$Y, xlab="광고료",
ylab="총판매액")
title("광고료와 판매액의 산점도")
market.lm = lm(Y~X, data=mmarket)
summary(market.lm)
market.lm = lm(Y~X, data=market)
summary(market.lm)
abline(market.lm)
# 그래프 값
identify(market$X, market$Y)
View(market.lm)
View(market.lm)
#어떤 값들이 있는지 확인 가능 names() 함수
names(market.lm)
resid = market.lm$residuals
fitted = market.lm$fitted
sum(resid) #sum of residuals
sum(fitted) # sum of suqared estimate
sum(market$Y) # sum of squared measurements
#분산분석표 작성 anova()
anova(market.lm)
#선형 모델에 대한 요약
summary(market.lm)
market = read.table("data/market-2.txt", header=T)
View(market)
View(market)
head(marke)
head(market)
X = market2[,c(2:3)]
X = market[,c(2:3)]
head(x)
head(X)
head(X)
X = cbind(1,X)
head(X)
Y = market[,c(4)]
X = as.matrix(X)
Y = as.matrix(Y)
XTX = t(X) %*% X
XTX
XTXI = solve(XTX) #역행렬 구하기 위해 sovle()
XTY = t(X) %*% Y
beta = XTXI %*% XTY
beta = round(beta,3)
beta
market2.lm = lm(Y~X1 +X2, data=market)
summary(market2.lm)
anova(market2.lm)
hospital = read.table("data/hospital.txt", header=T)
head(hospital)
#Y~, => Y를 종속변수, .은 나머지 모든 변수를 독립변수로
hospital.lm = lm(Y~.,data=hospital)
summary(hospital)
summary(hospital.lm)
library("fmsb")
install.packages(fmsb)
install.packages("fmsb")
library(fmsb)
VIF(lm(X1~X2+X3+X4+X5, data=hospital))
VIF(lm(X2~X1+X3+X4+X5, data=hospital))
VIF(lm(X3~X1+X2+X4+X5, data=hospital))
VIF(lm(X4~X1+X2+X3+X5, data=hospital))
VIF(lm(X5~X1+X2+X3+X4, data=hospital))
View(hospital)
source('~/GitHub/big_data/regression_analysis/2020-10-30-3-multicollinearity.R', echo=TRUE)
summary(lm(Y~X2+X3+X4+X5,data=hospital))
VIF(lm(X2~X3+X4+X5, data=hospital))
VIF(lm(X3~X2+X4+X5, data=hospital))
VIF(lm(X4~X2+X3+X5, data=hospital))
VIF(lm(X5~X2+X3+X4, data=hospital))
View(hospital)
cor(hospital[,c(-1,-6)])
hald = read.table("data/hald.txt",header=T)
hald = read.table("data/hald.txt",header=T)
hald = read.table("data/hald.txt",header=T)
head(hald)
install.packages("leaps")
library(leaps)
all.lm = regsubsets(Y~.,data=hald)
(rs=summary(all.lm))
names(rs)
rs$rsq
rs$adjr2
rs$cp
start.lm = lm(Y~1, data=hald)
full.lm = lm(Y~.,data=hald)
step(start.lm, scope=list(lower=start.lm,
upper=full.lm), direction="forward")
full.lm = lm(Y~., data=hald)
step(full.lm, data=hald, direction="backward")
#stepwise selection
start.lm = lm(Y~1, data=hald)
full.lm = lm(Y~.,data=hald)
step(start.lm, scope=list(lower=start.lm,
upper=full.lm), direction="both")
tcrime = read.table("data/tcrime.txt",header=T)
head(tcrime)
attach(tcrime)
plot(motor,tcratio,pch=19)
plot(motor,tcratio)
tcrime.lm = lm(tcratio~motor+I(motor^2),data=tcrime)
summary(tcrime.lm)
tcrime.lm = lm(tcratio~motor+motor^2,data=tcrime)
summary(tcrime.lm)
summary(tcrime.lm)
tcrime.lm = lm(tcratio~motor+I(motor^2),data=tcrime)
summary(tcrime.lm)
abline(tcrime.lm)
maraton = read.table("data/maraton.txt",header=T)
head(maraton)
plot(maraton$sect, maraton$m1990)
maraton.lm = lm(m1990~sect+I(sect^2)+I(sect^3),data=marton)
summary(maraton.lm)
maraton.lm = lm(m1990~sect+I(sect^2)+I(sect^3),data=maraton)
summary(maraton.lm)
soup = read.table("data/soup.txt",header=T)
head(soup)
plot(soup$X, soup$Y, type="n")
points(soup$X[soup$D=="line1"], soup$Y[soup$D=="line1"],
pch=17, col="BLUE")
View(soup)
View(soup)
#범주형 변수로 인식
soup$D = factor(soup$D, levels=c(0,1),
label=c("line0", "line1"))
points(soup$X[soup$D=="line1"], soup$Y[soup$D=="line1"],
pch=17, col="BLUE")
points(soup$x[soup$D=="line0"], soup$Y[soup$D=="line0"],
pch=19, col="RED")
points(soup$x[soup$D=="line0"], soup$Y[soup$D=="line0"],
pch=19, col="RED"))
points(soup$X[soup$D=="line0"], soup$Y[soup$D=="line0"],
pch=19, col="RED")
legend("bottomright", legend=levels(soup$D),
pch=c(19,17),col=c("RED","BLUE"))
soup.lm=lm(Y~X+D,data=soup)
summary(soup.lm)
abline(27.28179, 1.23074, lty=2, col="RED")
abline(27.28179+53.12920, 1.23074, lty=2, col="RED")
abline(27.28179+53.12920, 1.23074, lty=2, col="BLUE")
summary(soup2.lm)
soup2.lm = lm(Y ~ X+D+X:D, data=soup)
summary(soup2.lm)
glider = read.csv("data/sugar_glider_binomial.csv")
head(glider)
#로지스틱 회귀 모형 - 일반화 선형 모델
#링크 함수로 로짓함수 사용
logit_ml <- glm(occur~p_size_km+con_metric,
family=binomial(link=logit),
data=glider)
#로지스틱 회귀 모형 - 일반화 선형 모델
#링크 함수로 로짓함수 사용
logit_ml <- glm(occurr~p_size_km+con_metric,
family=binomial(link=logit),
data=glider)
head(glider)
summary(logit_ml)
1 - pchisq(68.994 - 54.661, 2)
anova(logit_ml)
